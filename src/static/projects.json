[
  {
    "name": "Me v2",
    "link": "https://github.com/kutoru/me-v2",
    "start_date": "2024.08.26",
    "end_date": "2024.09.05",
    "skills": ["React", "TypeScript", "Tailwind"],
    "description": "Website that you are on right now. It's nothing too special, but it is adaptive, and somewhat animated.",
    "text": "Although the project is quite small, I decided to include it in this list anyway, since I actually learned a few new things from it. Initially I just wanted to make at least <b>some</b> website to host on the domain, and since I haven't done any React in a while, I thought that it would also be a great opportunity to remind myself of some React.\nIn the end I wrote not only \"some\" kind of React, but actually challenged myself by using more hooks than I normally would. Most of the things you see here, from adaptivity to certain scroll logic, is implemented using hooks. Because of that, I learned quite a bit more about certain hooks that I didn't know that well in the past, such as useRef and useEffect.\nOther that the hooks, I also challenged myself with styling by using Tailwind for the first time. Before this project I already knew a thing or two about it, but never used it in a project like this. As I expected, Tailwind didn't turn out to be challenging, and I feel like i figured it out quite quickly (thanks to its documentation)."
  },
  {
    "name": "Miku Notes Android",
    "link": "https://github.com/kutoru/miku-notes-android",
    "start_date": "2024.07.27",
    "end_date": "2024.08.22",
    "skills": ["Android Development", "Kotlin", "REST", "MVVM"],
    "description": "Native Android application, that is a frontend for the Miku Notes project below.",
    "text": "Android development in general has been kind of a dark area that I didn't know anything about, but really wanted to get into it for some time. After finishing the backend logic for <a href=\"#Miku%20Notes\">Miku Notes</a>, I thought that it was a good opportunity to start getting into it and develop an actual application for the backend.\nOverall Kotlin seemed like a pretty easy language, especially since I was already familiar with both OOP as well as these \"half-FP\" languages, such as Rust. The Android development itself, on the other hand, was quite difficult. Because of the many various features that I wanted to implement, I had to learn quite a lot about the Android API, and some best practices related to that. The biggest issue I encountered was that a lot of the times, there were different requirements for implementing a certain functionality depending on a certain Android version. That makes sense to me, things get deprecated, but it would be great if there was a more ergonomic way for developers to implement certain features without having to explicitly check for an API version.\nWhile not directly related to the project, I streamed some of the developing process live on Twitch. I wanted to mention that because it also was an interesting experience, talking to different sorts of developers that joined my streams, whether they were interested in my app or not."
  },
  {
    "name": "Miku Notes",
    "link": "https://github.com/kutoru/miku-notes",
    "start_date": "2024.06.21",
    "end_date": "2024.07.13",
    "skills": ["Rust", "Docker", "ProtoBufs", "PostgreSQL", "CRUD", "Backend"],
    "description": "Mainly a note managment application, with proper user authentication, divided into multiple parts.",
    "text": "This is by far my biggest personal project, consisting of two frontends (one of them is written in React and the other one is the <a href=\"#Miku%20Notes%20Android\">Android app</a>) and three backend parts (or as I call them, microservices). For more information about the stack, individual parts, and the project overall, check its <a href=\"https://github.com/kutoru/miku-notes\">repo</a>.\nThe project itself originated from me and two other people willing to collab and wanting to write something together. One person worked on the web frontend, and the other worked on the authentication service. My original role was to write the data service, but it grew into guiding the entire project, reviewing code from other people, and making sure that all the parts work together. Eventually I also decided to write an Android app for the project.\nI already had a little bit of collaboration experience thanks to the <a href=\"#Admin%20Panel\">Admin Panel</a>, but majority of the time we worked on our own parts, in isolation, almost without any reviews or communication. But with this project, as opposed to the panel, our parts relied on each other, so we had to work a bit closer. Other than the overall collaboration, another thing that I enjoyed was my \"gluing\" role. It was quite challenging, but also very fun, not only thinking about my own code, but also keeping in mind how parts from the other two people work, and what would be a better way to tie them all together."
  },
  {
    "name": "Admin Panel",
    "link": null,
    "start_date": "2023.09.21",
    "end_date": "2024.03.11",
    "skills": [
      "JavaScript",
      "Node.js",
      "WebSockets",
      "Bootstrap",
      "API",
      "Full-stack"
    ],
    "description": "Social network manager for multiple accounts at a time, and also the project that I worked on during my time at a startup.",
    "text": "The basic idea was to create a single \"panel\", from which you could manage all of your social network accounts. This \"management\" included making posts, uploading videos, shorts (on YouTube, TikTok and Instagram), and messaging other people. My main role at the job was to implement various integrations with the social network APIs, and also update the \"panel\" (the frontend) itself when necessary. One of the most challenging tasks that I had to do on this job was trying to figure out Facebook's (and Instagram's) Graph API for a chat integration with the \"panel\" that I had to implement.\nWhile I was definitely excited to properly work for the first time, I relatively quickly realized that it was not the place that I wanted to work at. The bar for code quality was very low, we basically didn't do any code reviews, and we didn't even have version control in the beginning. After struggling for some time, I pushed us to start using git, and as expected, the productivity got quite a boost from that.\nAnother thing that I got disappointed in was the stack. Vanilla HTML + Bootstrap on the frontend, and Node.js + JavaScript on the backend. While it mostly did get the job done, once the project grew big enough, it was quite difficult to manage. For an example, to keep the html code at least somewhat readable, I had to split the html files into many smaller parts, and then write my own little hydration system for the html pages. While that was actually kind of fun, it was something I did instead of implementing new features that I had to work on at the time. On the backend, for the most part, I just wish we could at least have TypeScript instead of JavaScript. I asked for it a few times, but my suggestion got rejected. I think just the types alone would already help me both in terms of writing the code itself, and also structuring the backend's overall layout."
  },
  {
    "name": "DSA",
    "link": "https://github.com/kutoru/data-structures-and-algorithms",
    "start_date": "2023.07.27",
    "end_date": "2023.08.05",
    "skills": ["C", "DSA"],
    "description": "My attempt at completing a Data Structures and Algorithms course in C.",
    "text": "<a href=\"https://frontendmasters.com/courses/algorithms\">The course itself</a> was taught in TypeScript, but I decided to challenge myself and follow it in C instead. I also went a little bit beyond and implemented some things that were not shown there (Tries and Maps for example).\nWhile you could argue that this isn't much of a project on itself, it was definitely a valuable experience for me. Thanks to it, I came from barely knowing anything about DSA or C, to being quite familiar with them.\nA somewhat notable thing that I worked on in this project were generics. I believe that one of the most important parts of almost any data structure are generics. And since C doesn't officially support them, I decided to try and implement generics myself. I would probably do a much better job nowadays, but back then, while the generics worked, they most certainly were not ergonomic."
  },
  {
    "name": "Chanl",
    "link": "https://github.com/kutoru/chanl-backend",
    "start_date": "2023.07.02",
    "end_date": "2023.07.26",
    "skills": ["Go", "Vue", "Authentication", "WebSockets", "Full-stack"],
    "description": "Discord clone except the voice and video chat features.",
    "text": "This project seemed quite ambitious for me at the time. Since it was my first proper web project, before it, I barely knew anything about authentication, didn't know anything about WebSockets, and didn't even know how frontends interact with backends.\nEven thought I never finished it, it was certainly a big knowledge boost for me. For the first time I implemented a somewhat proper authentication system, notably using bcrypt and JWT, and since it was mostly a chat app, I had to learn WebSockets from scratch as well.\nIn terms of the stack, I went with Go because it seemed like a good language that I could also learn relatively easily (both facts turned out to be true), and Vue instead of React because I wanted some framework that was more of a \"Community choice\" rather than a \"Popularity choice\" (should've used Svelte)."
  },
  {
    "name": "Par",
    "link": "https://github.com/kutoru/par",
    "start_date": "2023.05.10",
    "end_date": "2023.05.17",
    "skills": ["Rust", "Forntend", "API", "GitHub"],
    "description": "Image inspecting app, that gets images dynamically from a certain website's API.",
    "text": "This was my first Rust project, and as such, the main goal for it was to learn as much Rust as possible. Since I was quite active in the software dev community, I (as some other people) got affected by the Rust hype a fair amount. On paper it did seem like a pretty fun language, and so I began learning it.\nI started off with the <a href=\"https://doc.rust-lang.org/book\">Book</a>, and after finishing most of the chapters, I decided that it was time to write a project. A lot of people say that Rust is a difficult language, and while I certainly agree that it has quite a learning curve, I didn't struggle with it at all. I just learned one thing after another, and almost everything just made sense to me.\nThere actually isn't much to mention about the project itself, other than while it wasn't perfect, it worked pretty well. This project was also my first time using and exploring the features of GitHub. It was pretty much when I learned how to make a repo and how to make commits."
  },
  {
    "name": "Sudoku GUI",
    "link": "https://github.com/kutoru/sudoku-gui",
    "start_date": "2023.04.08",
    "end_date": "2023.04.24",
    "skills": ["C++", "Windows Forms", "Frontend", "MySQL"],
    "description": "Sudoku game, with some GUI. It supports user account management, randomly generated levels as well as various difficulties.",
    "text": "I would consider this my first relatively \"big\" project that I ever did. My initial goals for it were to learn more about C++, GUI development and user authentication. Although back then I completely misunderstood the last part (by implementing the authentication logic on the client), I still learned a bit about different encryption techniques and best credential management practices.\nEventually I regretted using C++ for this project, since I think it was an overkill for an app like this. Most code examples online were in C#, and while I didn't have any issues translating them to C++ myself, it was kind of a sign to me that the memory management that C++ provides was far from necessary, at least for my use case."
  },
  {
    "name": "Everything before",
    "link": null,
    "start_date": "2020",
    "end_date": "2022",
    "skills": ["Python", "Selenium", "Bots", "SQLite"],
    "description": "What I did before the Sudoku app.",
    "text": "For the first three years of my software dev journey, I mostly wrote various Python scripts, such as simple web-scrapers, web-automation (using Selenium), and bots (for Discord, Telegram and YouTube). During this time I also introduced myself to SQL, specifically to SQLite to store my data locally.\nThree years is definitely a long period of time, but back then I didn't take software development as seriously as I do now, and instead it was just a little fun hobby of mine that I did from time to time. Even though I most certainly learned a lot during that time (coming from absolutely no software development experience and/or education, to at least being familiar with Python), I definitely wasn't as active as I should've, and I never ended up writing any big or notable projects."
  }
]
